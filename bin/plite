#!/usr/bin/env perl
use FindBin::libs;
use App::Rad qw(MoreHelp);
use App::Rad::Plugin::MoreHelp;

App::Rad->run();
use 5.014;
use strict;
use warnings;
use Data::Dumper;
use Sort::Naturally;
use Moo;
use App::Pipeline::Lite4::Command::viewpipeline;
use App::Pipeline::Lite4::Command::viewgraph;
use App::Pipeline::Lite4::Command::viewsystemconfig;
use App::Pipeline::Lite4::Command::new;
use App::Pipeline::Lite4::Command::run;
use App::Pipeline::Lite4::Command::file;
use App::Pipeline::Lite4::Command::symlink;

sub setup {
     my $c = shift;
     #$c->register( "setup", \&_setup, "setup pipelite" );
     $c->register_commands( {
         new => "create a new pipeline",          
         vp => "view pipeline",
         vg => "view pipeline graph",
         #vd => "view datasource",
         #vc => "view config",
         vsc => "view system config",
         #vl => "view log",
         #ve => "view error",
         run => "run pipeline",
         file => "get files",
         symlink => "symlink files"
         } );
}

sub _setup {
     
}

sub new {
     my $c = shift;
     my $desc = 'new PIPELINE_DIR';
     my %options = (
         'output_dir|d=s' => 'Sets output directory location'
     );
     return _usage ( $desc, \%options ) if scalar @{ $c->argv }  == 0;
     App::Pipeline::Lite4::Command::new->new->execute($c->options, $c->argv);
     #return join ' ', "Argument: ", $c->argv->flatten;      #!!! else show "new" : IMPLEMENT !!!# 
}

sub vp {
     my $c = shift;
     my $desc = 'vc (view pipeline) [OPTIONS] PIPELINE_DIR';
     my %options = (
         'editor|e=s' => 'Sets the editor e.g. plite vp -e vim. Overrides config file setting if exists.'
     );
     return _usage ( $desc, \%options ) if scalar @{ $c->argv } == 0;
     $c->getopt( keys %options );
     App::Pipeline::Lite4::Command::viewpipeline->new->execute($c->options, $c->argv);
     #return join ' ', "Argument: ", $c->argv->flatten;      #!!! else show the config file : IMPLEMENT !!!#
}

sub vg {
     my $c = shift;
     my $desc = 'vc (view pipeline graph) [OPTIONS] PIPELINE_DIR';
     my %options = (
         'editor|e=s' => 'Sets the editor e.g. plite vp -e vim. Overrides config file setting if exists.'
     );
     return _usage ( $desc, \%options ) if scalar @{ $c->argv } == 0;
     $c->getopt( keys %options );
     App::Pipeline::Lite4::Command::viewgraph->new->execute($c->options, $c->argv);
     #return join ' ', "Argument: ", $c->argv->flatten;      #!!! else show the config file : IMPLEMENT !!!#
}

#sub vc {
#     my $c = shift;
#     my $desc = 'vc (view config) [OPTIONS] PIPELINE_DIR';
#     my %options = (
#         'editor|e=s' => 'Sets the editor e.g. plite vc -e vim. Overrides config file setting if exists.'
#     );
#     return _usage ( $desc, \%options ) if scalar @{ $c->argv } == 0;
#     return join ' ', "Argument: ", $c->argv->flatten;      # else show the config file
#}

sub vsc {
     my $c = shift;
     my $desc = 'vsc (view system config) [OPTIONS]';
     my %options = (
         'editor|e=s' => 'Sets the editor e.g. plite vc -e vim. Overrides config file setting if exists.',
         #'output_dir|o=s'         => "output file",
     );
     #return _usage ( $desc, \%options ) if scalar @{ $c->argv } == 0;
     $c->getopt( keys %options );
     #print Dumper $c->options;
     App::Pipeline::Lite4::Command::viewsystemconfig->new->execute($c->options, $c->argv);
     #return join ' ', "Argument: ", $c->argv->flatten;      # else show the config file
}

sub ve {
     
}

sub vd {
     
}

sub vl {
    
}

sub run {
     my $c = shift;
     my $desc = 'run (run pipeline) [OPTIONS] PIPELINE';
     my %options = (
         'datasource|d=s' => 'Provides a path name to a datasource.',
         'smoke_test|m'   => 'Runs pipeline with out dispatching jobs',
         'run|r=i'        => 'Run on this run number',
         'steps|s=s'      => 'Run only these steps',
         'jobs|j=s'       => "Only run these jobs. Corresponds to rows in datasource. e.g --jobs '1,5,7-21' "
         # IN ORDER OF USEFULNESS: 
         # 'jobs|j=s'  => 'Run only on these job numbers (corresponds to rows in the datasource)'
         # 'run|r=i'   => 'Run on this run number',
         # 'steps|s=s' => 'Run only these steps'
         # '' 'output_dir|o=s'         => "output file",
     );
     
     return _usage ( $desc, \%options ) if scalar @{ $c->argv } == 0;       
     $c->getopt( keys %options );   
     App::Pipeline::Lite4::Command::run->new->execute($c->options, $c->argv);
}

sub file {
     my $c = shift;
     my $desc = 'file (get pipeline output files) [OPTIONS] PIPELINE';
     my %options = (
     'run_num|r=i'  => 'run_num',
     'stats|s'      => 'Show stats (size and mtime)',
     'step_name|t'     => 'Show step name in header',
     );
     return _usage ( $desc, \%options ) if scalar @{ $c->argv } == 0;       
     $c->getopt( keys %options );   
     App::Pipeline::Lite4::Command::file->new->execute($c->options, $c->argv);
}

sub symlink {
    my $c = shift;
    my $desc = 'symdir (creates dir of symlinks) [OPTIONS] PIPELINE';
    my %options = (
           #'datasource|d=s' => 'Provides a path name to a datasource.',
           'run_num|r=i'  => 'run_num',
          'id_field|f=s'   => 'Field in the datasource that will be the fileprefix',
          'step_and_fname|s=s' => 'Step and filename in format STEP#FILENAME',
          'path|p=s' => 'Path of directory, which will be created if it does not exist',
          'name|n=s' => 'This is the prefixed name that is required, it will replace the referenced filename'
          );  
      $c->getopt( keys %options );
      return _usage ( $desc, \%options ) if scalar @{ $c->argv } == 0;
      App::Pipeline::Lite4::Command::symlink->new->execute($c->options, $c->argv);
}

sub _options_str {
    my $options = shift;
    my $options_str;
    foreach my $key ( nsort keys %$options ){
       my ($longform,$shortform) = $key =~ /(.+)\|([a-z]+)/;
       $options_str .= "\t-$shortform --$longform\t" . $options->{$key} . "\n";  
    }
    return $options_str; 
}

sub _usage {
    my $cmd = shift;
    my $options_str = _options_str( shift);
    my $usage = <<USAGE
    
Usage: plite $cmd
     $options_str
USAGE
;
    return $usage;
}
